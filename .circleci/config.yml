version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:          
          channel: 04-finish-line
          event: fail
          template: basic_fail_1
  
  install-ansible:
    steps:
      - run:
          name: install ansible + openssh-client + curl + tar
          command: |
            sudo apt-get install -y tar
            sudo apt-get install -y curl
            sudo apt-get install -y openssh-client
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py --user
            python3 -m pip -V
            python3 -m pip install --user ansible

  install-awscli:
    steps:
      - run:
          name: install awscli v2 + unzip
          command: |
            sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install-nodejs:
    steps:
      - run:
          name: Install Node.js LTS version as our base Node.js version using n version manager to use Node.js v13.8.0
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g n
            sudo n 13.8.0

  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string 
        default: ${CIRCLE_WORKFLOW_ID:0:7}     
    steps:  
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment:" << parameters.workflow_id >>  
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/JzCiczjbM8iVExvAe4swXv/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
                echo "revert succeeded"
            fi 

jobs:

  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]  
      - run:
          command: |
            cd frontend
            npm install
            npm run test  
      - notify_on_failure
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm run test 
      - notify_on_failure
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build] 
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical 
      - notify_on_failure


  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical        
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
             yum update -y
             yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  \
            --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" >.circleci/ansible/inventory.txt

            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >>.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
     

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3b:e0:b7:d5:64:e3:33:35:c8:36:ac:94:e8:6a:e6:2d"]
      - attach_workspace:
          at: ~/
      - run: cat .circleci/ansible/inventory.txt
      - install-ansible
      - install-awscli      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install-nodejs
      - install-awscli
      - run:
          name: Run migrations
          command: |
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            cd backend
            npm install
            npm run migrations > migration_result.txt
      
      - run: cat ~/project/backend/migration_result.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migration_result.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
                
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install-awscli 
      - install-nodejs
      - install-ansible
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install-ansible
      - install-awscli 
      - install-nodejs
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["3b:e0:b7:d5:64:e3:33:35:c8:36:ac:94:e8:6a:e6:2d"]        
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm run build
            tar -czvf artifact.tar.gz dist/* package*
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files && echo "copied to files (Y)"
            cd ~/project/.circleci/ansible/roles/deploy/files
            ls -lcahS
      
      - run:
          name: transfer artifact.tar.gz by ansible to EC2 backend instance
          command: |

            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            export TYPEORM_MIGRATIONS_DIR=./migrations

            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml          
      
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  

  smoke-test:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install-ansible
      - install-awscli 
      - install-nodejs

      - run:
          name: Backend Smoke Testing
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)

            export API_URL=http://${BACKEND_IP}:3030
            echo "${API_URL}"
            
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend Smoke Testing
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi

      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
             yum update -y

      - run:
          name: store the Old Workflow ID fetched from CloudFront on kvdb.io for later old infra cleanup after promotion
          command: |
            export OldWorkFlowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "The OLD Workflow ID is $OldWorkFlowID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d $OldWorkFlowID
      
      - run:
          name: Update cloudfront distribution with the new infrastructure stacks
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
      
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: update pkgs and install tar utility
          command: |
             yum update -y
             yum install -y tar gzip
      - run:
          name: delete stacks whose workflow id is equivalent to the old workflow id stored on kvdb.io
          command: |

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo "Stack names are ${STACKS[@]}"
            export OLD_WORKFLOW_ID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo "the detected workflow id from kvdb.io is $OLD_WORKFLOW_ID"
            
            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            fi
            
  #for congratulations (Y)
  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          channel: 04-finish-line
          event: pass
          template: success_tagged_deploy_1


workflows:
  myworkflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup
          requires: [cloudfront-update]